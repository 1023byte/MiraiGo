// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: cmd0x388.proto

package cmd0x388

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DelImgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcUin          *uint64 `protobuf:"varint,1,opt,name=srcUin" json:"srcUin,omitempty"`
	DstUin          *uint64 `protobuf:"varint,2,opt,name=dstUin" json:"dstUin,omitempty"`
	ReqTerm         *uint32 `protobuf:"varint,3,opt,name=reqTerm" json:"reqTerm,omitempty"`
	ReqPlatformType *uint32 `protobuf:"varint,4,opt,name=reqPlatformType" json:"reqPlatformType,omitempty"`
	BuType          *uint32 `protobuf:"varint,5,opt,name=buType" json:"buType,omitempty"`
	BuildVer        []byte  `protobuf:"bytes,6,opt,name=buildVer" json:"buildVer,omitempty"`
	FileResid       []byte  `protobuf:"bytes,7,opt,name=fileResid" json:"fileResid,omitempty"`
	PicWidth        *uint32 `protobuf:"varint,8,opt,name=picWidth" json:"picWidth,omitempty"`
	PicHeight       *uint32 `protobuf:"varint,9,opt,name=picHeight" json:"picHeight,omitempty"`
}

func (x *DelImgReq) Reset() {
	*x = DelImgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelImgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelImgReq) ProtoMessage() {}

func (x *DelImgReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelImgReq.ProtoReflect.Descriptor instead.
func (*DelImgReq) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{0}
}

func (x *DelImgReq) GetSrcUin() uint64 {
	if x != nil && x.SrcUin != nil {
		return *x.SrcUin
	}
	return 0
}

func (x *DelImgReq) GetDstUin() uint64 {
	if x != nil && x.DstUin != nil {
		return *x.DstUin
	}
	return 0
}

func (x *DelImgReq) GetReqTerm() uint32 {
	if x != nil && x.ReqTerm != nil {
		return *x.ReqTerm
	}
	return 0
}

func (x *DelImgReq) GetReqPlatformType() uint32 {
	if x != nil && x.ReqPlatformType != nil {
		return *x.ReqPlatformType
	}
	return 0
}

func (x *DelImgReq) GetBuType() uint32 {
	if x != nil && x.BuType != nil {
		return *x.BuType
	}
	return 0
}

func (x *DelImgReq) GetBuildVer() []byte {
	if x != nil {
		return x.BuildVer
	}
	return nil
}

func (x *DelImgReq) GetFileResid() []byte {
	if x != nil {
		return x.FileResid
	}
	return nil
}

func (x *DelImgReq) GetPicWidth() uint32 {
	if x != nil && x.PicWidth != nil {
		return *x.PicWidth
	}
	return 0
}

func (x *DelImgReq) GetPicHeight() uint32 {
	if x != nil && x.PicHeight != nil {
		return *x.PicHeight
	}
	return 0
}

type DelImgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	FailMsg   []byte  `protobuf:"bytes,2,opt,name=failMsg" json:"failMsg,omitempty"`
	FileResid []byte  `protobuf:"bytes,3,opt,name=fileResid" json:"fileResid,omitempty"`
}

func (x *DelImgRsp) Reset() {
	*x = DelImgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelImgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelImgRsp) ProtoMessage() {}

func (x *DelImgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelImgRsp.ProtoReflect.Descriptor instead.
func (*DelImgRsp) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{1}
}

func (x *DelImgRsp) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *DelImgRsp) GetFailMsg() []byte {
	if x != nil {
		return x.FailMsg
	}
	return nil
}

func (x *DelImgRsp) GetFileResid() []byte {
	if x != nil {
		return x.FileResid
	}
	return nil
}

type ExpRoamExtendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resid []byte `protobuf:"bytes,1,opt,name=resid" json:"resid,omitempty"`
}

func (x *ExpRoamExtendInfo) Reset() {
	*x = ExpRoamExtendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpRoamExtendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpRoamExtendInfo) ProtoMessage() {}

func (x *ExpRoamExtendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpRoamExtendInfo.ProtoReflect.Descriptor instead.
func (*ExpRoamExtendInfo) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{2}
}

func (x *ExpRoamExtendInfo) GetResid() []byte {
	if x != nil {
		return x.Resid
	}
	return nil
}

type ExpRoamPicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopFlag *uint32 `protobuf:"varint,1,opt,name=shopFlag" json:"shopFlag,omitempty"`
	PkgId    *uint32 `protobuf:"varint,2,opt,name=pkgId" json:"pkgId,omitempty"`
	PicId    []byte  `protobuf:"bytes,3,opt,name=picId" json:"picId,omitempty"`
}

func (x *ExpRoamPicInfo) Reset() {
	*x = ExpRoamPicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpRoamPicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpRoamPicInfo) ProtoMessage() {}

func (x *ExpRoamPicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpRoamPicInfo.ProtoReflect.Descriptor instead.
func (*ExpRoamPicInfo) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{3}
}

func (x *ExpRoamPicInfo) GetShopFlag() uint32 {
	if x != nil && x.ShopFlag != nil {
		return *x.ShopFlag
	}
	return 0
}

func (x *ExpRoamPicInfo) GetPkgId() uint32 {
	if x != nil && x.PkgId != nil {
		return *x.PkgId
	}
	return 0
}

func (x *ExpRoamPicInfo) GetPicId() []byte {
	if x != nil {
		return x.PicId
	}
	return nil
}

type ExtensionCommPicTryUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extinfo [][]byte `protobuf:"bytes,1,rep,name=extinfo" json:"extinfo,omitempty"`
}

func (x *ExtensionCommPicTryUp) Reset() {
	*x = ExtensionCommPicTryUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionCommPicTryUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionCommPicTryUp) ProtoMessage() {}

func (x *ExtensionCommPicTryUp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionCommPicTryUp.ProtoReflect.Descriptor instead.
func (*ExtensionCommPicTryUp) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{4}
}

func (x *ExtensionCommPicTryUp) GetExtinfo() [][]byte {
	if x != nil {
		return x.Extinfo
	}
	return nil
}

type ExtensionExpRoamTryUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExproamPicInfo []*ExpRoamPicInfo `protobuf:"bytes,1,rep,name=exproamPicInfo" json:"exproamPicInfo,omitempty"`
}

func (x *ExtensionExpRoamTryUp) Reset() {
	*x = ExtensionExpRoamTryUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionExpRoamTryUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionExpRoamTryUp) ProtoMessage() {}

func (x *ExtensionExpRoamTryUp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionExpRoamTryUp.ProtoReflect.Descriptor instead.
func (*ExtensionExpRoamTryUp) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{5}
}

func (x *ExtensionExpRoamTryUp) GetExproamPicInfo() []*ExpRoamPicInfo {
	if x != nil {
		return x.ExproamPicInfo
	}
	return nil
}

type GetImgUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode       *uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode,omitempty"`
	DstUin          *uint64 `protobuf:"varint,2,opt,name=dstUin" json:"dstUin,omitempty"`
	Fileid          *uint64 `protobuf:"varint,3,opt,name=fileid" json:"fileid,omitempty"`
	FileMd5         []byte  `protobuf:"bytes,4,opt,name=fileMd5" json:"fileMd5,omitempty"`
	UrlFlag         *uint32 `protobuf:"varint,5,opt,name=urlFlag" json:"urlFlag,omitempty"`
	UrlType         *uint32 `protobuf:"varint,6,opt,name=urlType" json:"urlType,omitempty"`
	ReqTerm         *uint32 `protobuf:"varint,7,opt,name=reqTerm" json:"reqTerm,omitempty"`
	ReqPlatformType *uint32 `protobuf:"varint,8,opt,name=reqPlatformType" json:"reqPlatformType,omitempty"`
	InnerIp         *uint32 `protobuf:"varint,9,opt,name=innerIp" json:"innerIp,omitempty"`
	BuType          *uint32 `protobuf:"varint,10,opt,name=buType" json:"buType,omitempty"`
	BuildVer        []byte  `protobuf:"bytes,11,opt,name=buildVer" json:"buildVer,omitempty"`
	FileId          *uint64 `protobuf:"varint,12,opt,name=fileId" json:"fileId,omitempty"`
	FileSize        *uint64 `protobuf:"varint,13,opt,name=fileSize" json:"fileSize,omitempty"`
	OriginalPic     *uint32 `protobuf:"varint,14,opt,name=originalPic" json:"originalPic,omitempty"`
	RetryReq        *uint32 `protobuf:"varint,15,opt,name=retryReq" json:"retryReq,omitempty"`
	FileHeight      *uint32 `protobuf:"varint,16,opt,name=fileHeight" json:"fileHeight,omitempty"`
	FileWidth       *uint32 `protobuf:"varint,17,opt,name=fileWidth" json:"fileWidth,omitempty"`
	PicType         *uint32 `protobuf:"varint,18,opt,name=picType" json:"picType,omitempty"`
	PicUpTimestamp  *uint32 `protobuf:"varint,19,opt,name=picUpTimestamp" json:"picUpTimestamp,omitempty"`
	ReqTransferType *uint32 `protobuf:"varint,20,opt,name=reqTransferType" json:"reqTransferType,omitempty"`
	QqmeetGuildId   *uint64 `protobuf:"varint,21,opt,name=qqmeetGuildId" json:"qqmeetGuildId,omitempty"`
	QqmeetChannelId *uint64 `protobuf:"varint,22,opt,name=qqmeetChannelId" json:"qqmeetChannelId,omitempty"`
	DownloadIndex   []byte  `protobuf:"bytes,23,opt,name=downloadIndex" json:"downloadIndex,omitempty"`
}

func (x *GetImgUrlReq) Reset() {
	*x = GetImgUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImgUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImgUrlReq) ProtoMessage() {}

func (x *GetImgUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImgUrlReq.ProtoReflect.Descriptor instead.
func (*GetImgUrlReq) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{6}
}

func (x *GetImgUrlReq) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *GetImgUrlReq) GetDstUin() uint64 {
	if x != nil && x.DstUin != nil {
		return *x.DstUin
	}
	return 0
}

func (x *GetImgUrlReq) GetFileid() uint64 {
	if x != nil && x.Fileid != nil {
		return *x.Fileid
	}
	return 0
}

func (x *GetImgUrlReq) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *GetImgUrlReq) GetUrlFlag() uint32 {
	if x != nil && x.UrlFlag != nil {
		return *x.UrlFlag
	}
	return 0
}

func (x *GetImgUrlReq) GetUrlType() uint32 {
	if x != nil && x.UrlType != nil {
		return *x.UrlType
	}
	return 0
}

func (x *GetImgUrlReq) GetReqTerm() uint32 {
	if x != nil && x.ReqTerm != nil {
		return *x.ReqTerm
	}
	return 0
}

func (x *GetImgUrlReq) GetReqPlatformType() uint32 {
	if x != nil && x.ReqPlatformType != nil {
		return *x.ReqPlatformType
	}
	return 0
}

func (x *GetImgUrlReq) GetInnerIp() uint32 {
	if x != nil && x.InnerIp != nil {
		return *x.InnerIp
	}
	return 0
}

func (x *GetImgUrlReq) GetBuType() uint32 {
	if x != nil && x.BuType != nil {
		return *x.BuType
	}
	return 0
}

func (x *GetImgUrlReq) GetBuildVer() []byte {
	if x != nil {
		return x.BuildVer
	}
	return nil
}

func (x *GetImgUrlReq) GetFileId() uint64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *GetImgUrlReq) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *GetImgUrlReq) GetOriginalPic() uint32 {
	if x != nil && x.OriginalPic != nil {
		return *x.OriginalPic
	}
	return 0
}

func (x *GetImgUrlReq) GetRetryReq() uint32 {
	if x != nil && x.RetryReq != nil {
		return *x.RetryReq
	}
	return 0
}

func (x *GetImgUrlReq) GetFileHeight() uint32 {
	if x != nil && x.FileHeight != nil {
		return *x.FileHeight
	}
	return 0
}

func (x *GetImgUrlReq) GetFileWidth() uint32 {
	if x != nil && x.FileWidth != nil {
		return *x.FileWidth
	}
	return 0
}

func (x *GetImgUrlReq) GetPicType() uint32 {
	if x != nil && x.PicType != nil {
		return *x.PicType
	}
	return 0
}

func (x *GetImgUrlReq) GetPicUpTimestamp() uint32 {
	if x != nil && x.PicUpTimestamp != nil {
		return *x.PicUpTimestamp
	}
	return 0
}

func (x *GetImgUrlReq) GetReqTransferType() uint32 {
	if x != nil && x.ReqTransferType != nil {
		return *x.ReqTransferType
	}
	return 0
}

func (x *GetImgUrlReq) GetQqmeetGuildId() uint64 {
	if x != nil && x.QqmeetGuildId != nil {
		return *x.QqmeetGuildId
	}
	return 0
}

func (x *GetImgUrlReq) GetQqmeetChannelId() uint64 {
	if x != nil && x.QqmeetChannelId != nil {
		return *x.QqmeetChannelId
	}
	return 0
}

func (x *GetImgUrlReq) GetDownloadIndex() []byte {
	if x != nil {
		return x.DownloadIndex
	}
	return nil
}

type GetImgUrlRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fileid           *uint64     `protobuf:"varint,1,opt,name=fileid" json:"fileid,omitempty"`
	FileMd5          []byte      `protobuf:"bytes,2,opt,name=fileMd5" json:"fileMd5,omitempty"`
	Result           *uint32     `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	FailMsg          []byte      `protobuf:"bytes,4,opt,name=failMsg" json:"failMsg,omitempty"`
	ImgInfo          *ImgInfo    `protobuf:"bytes,5,opt,name=imgInfo" json:"imgInfo,omitempty"`
	ThumbDownUrl     [][]byte    `protobuf:"bytes,6,rep,name=thumbDownUrl" json:"thumbDownUrl,omitempty"`
	OriginalDownUrl  [][]byte    `protobuf:"bytes,7,rep,name=originalDownUrl" json:"originalDownUrl,omitempty"`
	BigDownUrl       [][]byte    `protobuf:"bytes,8,rep,name=bigDownUrl" json:"bigDownUrl,omitempty"`
	DownIp           []uint32    `protobuf:"varint,9,rep,name=downIp" json:"downIp,omitempty"`
	DownPort         []uint32    `protobuf:"varint,10,rep,name=downPort" json:"downPort,omitempty"`
	DownDomain       []byte      `protobuf:"bytes,11,opt,name=downDomain" json:"downDomain,omitempty"`
	ThumbDownPara    []byte      `protobuf:"bytes,12,opt,name=thumbDownPara" json:"thumbDownPara,omitempty"`
	OriginalDownPara []byte      `protobuf:"bytes,13,opt,name=originalDownPara" json:"originalDownPara,omitempty"`
	BigDownPara      []byte      `protobuf:"bytes,14,opt,name=bigDownPara" json:"bigDownPara,omitempty"`
	FileId           *uint64     `protobuf:"varint,15,opt,name=fileId" json:"fileId,omitempty"`
	AutoDownType     *uint32     `protobuf:"varint,16,opt,name=autoDownType" json:"autoDownType,omitempty"`
	OrderDownType    []uint32    `protobuf:"varint,17,rep,name=orderDownType" json:"orderDownType,omitempty"`
	BigThumbDownPara []byte      `protobuf:"bytes,19,opt,name=bigThumbDownPara" json:"bigThumbDownPara,omitempty"`
	HttpsUrlFlag     *uint32     `protobuf:"varint,20,opt,name=httpsUrlFlag" json:"httpsUrlFlag,omitempty"`
	DownIp6          []*IPv6Info `protobuf:"bytes,26,rep,name=downIp6" json:"downIp6,omitempty"`
	ClientIp6        []byte      `protobuf:"bytes,27,opt,name=clientIp6" json:"clientIp6,omitempty"`
}

func (x *GetImgUrlRsp) Reset() {
	*x = GetImgUrlRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImgUrlRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImgUrlRsp) ProtoMessage() {}

func (x *GetImgUrlRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImgUrlRsp.ProtoReflect.Descriptor instead.
func (*GetImgUrlRsp) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{7}
}

func (x *GetImgUrlRsp) GetFileid() uint64 {
	if x != nil && x.Fileid != nil {
		return *x.Fileid
	}
	return 0
}

func (x *GetImgUrlRsp) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *GetImgUrlRsp) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *GetImgUrlRsp) GetFailMsg() []byte {
	if x != nil {
		return x.FailMsg
	}
	return nil
}

func (x *GetImgUrlRsp) GetImgInfo() *ImgInfo {
	if x != nil {
		return x.ImgInfo
	}
	return nil
}

func (x *GetImgUrlRsp) GetThumbDownUrl() [][]byte {
	if x != nil {
		return x.ThumbDownUrl
	}
	return nil
}

func (x *GetImgUrlRsp) GetOriginalDownUrl() [][]byte {
	if x != nil {
		return x.OriginalDownUrl
	}
	return nil
}

func (x *GetImgUrlRsp) GetBigDownUrl() [][]byte {
	if x != nil {
		return x.BigDownUrl
	}
	return nil
}

func (x *GetImgUrlRsp) GetDownIp() []uint32 {
	if x != nil {
		return x.DownIp
	}
	return nil
}

func (x *GetImgUrlRsp) GetDownPort() []uint32 {
	if x != nil {
		return x.DownPort
	}
	return nil
}

func (x *GetImgUrlRsp) GetDownDomain() []byte {
	if x != nil {
		return x.DownDomain
	}
	return nil
}

func (x *GetImgUrlRsp) GetThumbDownPara() []byte {
	if x != nil {
		return x.ThumbDownPara
	}
	return nil
}

func (x *GetImgUrlRsp) GetOriginalDownPara() []byte {
	if x != nil {
		return x.OriginalDownPara
	}
	return nil
}

func (x *GetImgUrlRsp) GetBigDownPara() []byte {
	if x != nil {
		return x.BigDownPara
	}
	return nil
}

func (x *GetImgUrlRsp) GetFileId() uint64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *GetImgUrlRsp) GetAutoDownType() uint32 {
	if x != nil && x.AutoDownType != nil {
		return *x.AutoDownType
	}
	return 0
}

func (x *GetImgUrlRsp) GetOrderDownType() []uint32 {
	if x != nil {
		return x.OrderDownType
	}
	return nil
}

func (x *GetImgUrlRsp) GetBigThumbDownPara() []byte {
	if x != nil {
		return x.BigThumbDownPara
	}
	return nil
}

func (x *GetImgUrlRsp) GetHttpsUrlFlag() uint32 {
	if x != nil && x.HttpsUrlFlag != nil {
		return *x.HttpsUrlFlag
	}
	return 0
}

func (x *GetImgUrlRsp) GetDownIp6() []*IPv6Info {
	if x != nil {
		return x.DownIp6
	}
	return nil
}

func (x *GetImgUrlRsp) GetClientIp6() []byte {
	if x != nil {
		return x.ClientIp6
	}
	return nil
}

type GetPttUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode       *uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode,omitempty"`
	DstUin          *uint64 `protobuf:"varint,2,opt,name=dstUin" json:"dstUin,omitempty"`
	Fileid          *uint64 `protobuf:"varint,3,opt,name=fileid" json:"fileid,omitempty"`
	FileMd5         []byte  `protobuf:"bytes,4,opt,name=fileMd5" json:"fileMd5,omitempty"`
	ReqTerm         *uint32 `protobuf:"varint,5,opt,name=reqTerm" json:"reqTerm,omitempty"`
	ReqPlatformType *uint32 `protobuf:"varint,6,opt,name=reqPlatformType" json:"reqPlatformType,omitempty"`
	InnerIp         *uint32 `protobuf:"varint,7,opt,name=innerIp" json:"innerIp,omitempty"`
	BuType          *uint32 `protobuf:"varint,8,opt,name=buType" json:"buType,omitempty"`
	BuildVer        []byte  `protobuf:"bytes,9,opt,name=buildVer" json:"buildVer,omitempty"`
	FileId          *uint64 `protobuf:"varint,10,opt,name=fileId" json:"fileId,omitempty"`
	FileKey         []byte  `protobuf:"bytes,11,opt,name=fileKey" json:"fileKey,omitempty"`
	Codec           *uint32 `protobuf:"varint,12,opt,name=codec" json:"codec,omitempty"`
	BuId            *uint32 `protobuf:"varint,13,opt,name=buId" json:"buId,omitempty"`
	ReqTransferType *uint32 `protobuf:"varint,14,opt,name=reqTransferType" json:"reqTransferType,omitempty"`
	IsAuto          *uint32 `protobuf:"varint,15,opt,name=isAuto" json:"isAuto,omitempty"`
}

func (x *GetPttUrlReq) Reset() {
	*x = GetPttUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPttUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPttUrlReq) ProtoMessage() {}

func (x *GetPttUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPttUrlReq.ProtoReflect.Descriptor instead.
func (*GetPttUrlReq) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{8}
}

func (x *GetPttUrlReq) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *GetPttUrlReq) GetDstUin() uint64 {
	if x != nil && x.DstUin != nil {
		return *x.DstUin
	}
	return 0
}

func (x *GetPttUrlReq) GetFileid() uint64 {
	if x != nil && x.Fileid != nil {
		return *x.Fileid
	}
	return 0
}

func (x *GetPttUrlReq) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *GetPttUrlReq) GetReqTerm() uint32 {
	if x != nil && x.ReqTerm != nil {
		return *x.ReqTerm
	}
	return 0
}

func (x *GetPttUrlReq) GetReqPlatformType() uint32 {
	if x != nil && x.ReqPlatformType != nil {
		return *x.ReqPlatformType
	}
	return 0
}

func (x *GetPttUrlReq) GetInnerIp() uint32 {
	if x != nil && x.InnerIp != nil {
		return *x.InnerIp
	}
	return 0
}

func (x *GetPttUrlReq) GetBuType() uint32 {
	if x != nil && x.BuType != nil {
		return *x.BuType
	}
	return 0
}

func (x *GetPttUrlReq) GetBuildVer() []byte {
	if x != nil {
		return x.BuildVer
	}
	return nil
}

func (x *GetPttUrlReq) GetFileId() uint64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *GetPttUrlReq) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *GetPttUrlReq) GetCodec() uint32 {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return 0
}

func (x *GetPttUrlReq) GetBuId() uint32 {
	if x != nil && x.BuId != nil {
		return *x.BuId
	}
	return 0
}

func (x *GetPttUrlReq) GetReqTransferType() uint32 {
	if x != nil && x.ReqTransferType != nil {
		return *x.ReqTransferType
	}
	return 0
}

func (x *GetPttUrlReq) GetIsAuto() uint32 {
	if x != nil && x.IsAuto != nil {
		return *x.IsAuto
	}
	return 0
}

type GetPttUrlRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fileid       *uint64     `protobuf:"varint,1,opt,name=fileid" json:"fileid,omitempty"`
	FileMd5      []byte      `protobuf:"bytes,2,opt,name=fileMd5" json:"fileMd5,omitempty"`
	Result       *uint32     `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	FailMsg      []byte      `protobuf:"bytes,4,opt,name=failMsg" json:"failMsg,omitempty"`
	DownUrl      [][]byte    `protobuf:"bytes,5,rep,name=downUrl" json:"downUrl,omitempty"`
	DownIp       []uint32    `protobuf:"varint,6,rep,name=downIp" json:"downIp,omitempty"`
	DownPort     []uint32    `protobuf:"varint,7,rep,name=downPort" json:"downPort,omitempty"`
	DownDomain   []byte      `protobuf:"bytes,8,opt,name=downDomain" json:"downDomain,omitempty"`
	DownPara     []byte      `protobuf:"bytes,9,opt,name=downPara" json:"downPara,omitempty"`
	FileId       *uint64     `protobuf:"varint,10,opt,name=fileId" json:"fileId,omitempty"`
	TransferType *uint32     `protobuf:"varint,11,opt,name=transferType" json:"transferType,omitempty"`
	AllowRetry   *uint32     `protobuf:"varint,12,opt,name=allowRetry" json:"allowRetry,omitempty"`
	DownIp6      []*IPv6Info `protobuf:"bytes,26,rep,name=downIp6" json:"downIp6,omitempty"`
	ClientIp6    []byte      `protobuf:"bytes,27,opt,name=clientIp6" json:"clientIp6,omitempty"`
	Domain       *string     `protobuf:"bytes,28,opt,name=domain" json:"domain,omitempty"`
}

func (x *GetPttUrlRsp) Reset() {
	*x = GetPttUrlRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPttUrlRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPttUrlRsp) ProtoMessage() {}

func (x *GetPttUrlRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPttUrlRsp.ProtoReflect.Descriptor instead.
func (*GetPttUrlRsp) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{9}
}

func (x *GetPttUrlRsp) GetFileid() uint64 {
	if x != nil && x.Fileid != nil {
		return *x.Fileid
	}
	return 0
}

func (x *GetPttUrlRsp) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *GetPttUrlRsp) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *GetPttUrlRsp) GetFailMsg() []byte {
	if x != nil {
		return x.FailMsg
	}
	return nil
}

func (x *GetPttUrlRsp) GetDownUrl() [][]byte {
	if x != nil {
		return x.DownUrl
	}
	return nil
}

func (x *GetPttUrlRsp) GetDownIp() []uint32 {
	if x != nil {
		return x.DownIp
	}
	return nil
}

func (x *GetPttUrlRsp) GetDownPort() []uint32 {
	if x != nil {
		return x.DownPort
	}
	return nil
}

func (x *GetPttUrlRsp) GetDownDomain() []byte {
	if x != nil {
		return x.DownDomain
	}
	return nil
}

func (x *GetPttUrlRsp) GetDownPara() []byte {
	if x != nil {
		return x.DownPara
	}
	return nil
}

func (x *GetPttUrlRsp) GetFileId() uint64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *GetPttUrlRsp) GetTransferType() uint32 {
	if x != nil && x.TransferType != nil {
		return *x.TransferType
	}
	return 0
}

func (x *GetPttUrlRsp) GetAllowRetry() uint32 {
	if x != nil && x.AllowRetry != nil {
		return *x.AllowRetry
	}
	return 0
}

func (x *GetPttUrlRsp) GetDownIp6() []*IPv6Info {
	if x != nil {
		return x.DownIp6
	}
	return nil
}

func (x *GetPttUrlRsp) GetClientIp6() []byte {
	if x != nil {
		return x.ClientIp6
	}
	return nil
}

func (x *GetPttUrlRsp) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

type IPv6Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip6  []byte  `protobuf:"bytes,1,opt,name=ip6" json:"ip6,omitempty"`
	Port *uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (x *IPv6Info) Reset() {
	*x = IPv6Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv6Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv6Info) ProtoMessage() {}

func (x *IPv6Info) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv6Info.ProtoReflect.Descriptor instead.
func (*IPv6Info) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{10}
}

func (x *IPv6Info) GetIp6() []byte {
	if x != nil {
		return x.Ip6
	}
	return nil
}

func (x *IPv6Info) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type ImgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileMd5    []byte  `protobuf:"bytes,1,opt,name=fileMd5" json:"fileMd5,omitempty"`
	FileType   *uint32 `protobuf:"varint,2,opt,name=fileType" json:"fileType,omitempty"`
	FileSize   *uint64 `protobuf:"varint,3,opt,name=fileSize" json:"fileSize,omitempty"`
	FileWidth  *uint32 `protobuf:"varint,4,opt,name=fileWidth" json:"fileWidth,omitempty"`
	FileHeight *uint32 `protobuf:"varint,5,opt,name=fileHeight" json:"fileHeight,omitempty"`
}

func (x *ImgInfo) Reset() {
	*x = ImgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgInfo) ProtoMessage() {}

func (x *ImgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgInfo.ProtoReflect.Descriptor instead.
func (*ImgInfo) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{11}
}

func (x *ImgInfo) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *ImgInfo) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *ImgInfo) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *ImgInfo) GetFileWidth() uint32 {
	if x != nil && x.FileWidth != nil {
		return *x.FileWidth
	}
	return 0
}

func (x *ImgInfo) GetFileHeight() uint32 {
	if x != nil && x.FileHeight != nil {
		return *x.FileHeight
	}
	return 0
}

type PicSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Original *uint32 `protobuf:"varint,1,opt,name=original" json:"original,omitempty"`
	Thumb    *uint32 `protobuf:"varint,2,opt,name=thumb" json:"thumb,omitempty"`
	High     *uint32 `protobuf:"varint,3,opt,name=high" json:"high,omitempty"`
}

func (x *PicSize) Reset() {
	*x = PicSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PicSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicSize) ProtoMessage() {}

func (x *PicSize) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicSize.ProtoReflect.Descriptor instead.
func (*PicSize) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{12}
}

func (x *PicSize) GetOriginal() uint32 {
	if x != nil && x.Original != nil {
		return *x.Original
	}
	return 0
}

func (x *PicSize) GetThumb() uint32 {
	if x != nil && x.Thumb != nil {
		return *x.Thumb
	}
	return 0
}

func (x *PicSize) GetHigh() uint32 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

type D388ReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetType      *uint32         `protobuf:"varint,1,opt,name=netType" json:"netType,omitempty"`
	Subcmd       *uint32         `protobuf:"varint,2,opt,name=subcmd" json:"subcmd,omitempty"`
	TryupImgReq  []*TryUpImgReq  `protobuf:"bytes,3,rep,name=tryupImgReq" json:"tryupImgReq,omitempty"`
	GetimgUrlReq []*GetImgUrlReq `protobuf:"bytes,4,rep,name=getimgUrlReq" json:"getimgUrlReq,omitempty"`
	TryupPttReq  []*TryUpPttReq  `protobuf:"bytes,5,rep,name=tryupPttReq" json:"tryupPttReq,omitempty"`
	GetpttUrlReq []*GetPttUrlReq `protobuf:"bytes,6,rep,name=getpttUrlReq" json:"getpttUrlReq,omitempty"`
	CommandId    *uint32         `protobuf:"varint,7,opt,name=commandId" json:"commandId,omitempty"`
	DelImgReq    []*DelImgReq    `protobuf:"bytes,8,rep,name=delImgReq" json:"delImgReq,omitempty"`
	Extension    []byte          `protobuf:"bytes,1001,opt,name=extension" json:"extension,omitempty"`
}

func (x *D388ReqBody) Reset() {
	*x = D388ReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *D388ReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D388ReqBody) ProtoMessage() {}

func (x *D388ReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D388ReqBody.ProtoReflect.Descriptor instead.
func (*D388ReqBody) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{13}
}

func (x *D388ReqBody) GetNetType() uint32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *D388ReqBody) GetSubcmd() uint32 {
	if x != nil && x.Subcmd != nil {
		return *x.Subcmd
	}
	return 0
}

func (x *D388ReqBody) GetTryupImgReq() []*TryUpImgReq {
	if x != nil {
		return x.TryupImgReq
	}
	return nil
}

func (x *D388ReqBody) GetGetimgUrlReq() []*GetImgUrlReq {
	if x != nil {
		return x.GetimgUrlReq
	}
	return nil
}

func (x *D388ReqBody) GetTryupPttReq() []*TryUpPttReq {
	if x != nil {
		return x.TryupPttReq
	}
	return nil
}

func (x *D388ReqBody) GetGetpttUrlReq() []*GetPttUrlReq {
	if x != nil {
		return x.GetpttUrlReq
	}
	return nil
}

func (x *D388ReqBody) GetCommandId() uint32 {
	if x != nil && x.CommandId != nil {
		return *x.CommandId
	}
	return 0
}

func (x *D388ReqBody) GetDelImgReq() []*DelImgReq {
	if x != nil {
		return x.DelImgReq
	}
	return nil
}

func (x *D388ReqBody) GetExtension() []byte {
	if x != nil {
		return x.Extension
	}
	return nil
}

type D388RspBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIp     *uint32            `protobuf:"varint,1,opt,name=clientIp" json:"clientIp,omitempty"`
	Subcmd       *uint32            `protobuf:"varint,2,opt,name=subcmd" json:"subcmd,omitempty"`
	TryupImgRsp  []*D388TryUpImgRsp `protobuf:"bytes,3,rep,name=tryupImgRsp" json:"tryupImgRsp,omitempty"`
	GetimgUrlRsp []*GetImgUrlRsp    `protobuf:"bytes,4,rep,name=getimgUrlRsp" json:"getimgUrlRsp,omitempty"`
	TryupPttRsp  []*TryUpPttRsp     `protobuf:"bytes,5,rep,name=tryupPttRsp" json:"tryupPttRsp,omitempty"`
	GetpttUrlRsp []*GetPttUrlRsp    `protobuf:"bytes,6,rep,name=getpttUrlRsp" json:"getpttUrlRsp,omitempty"`
	DelImgRsp    []*DelImgRsp       `protobuf:"bytes,7,rep,name=delImgRsp" json:"delImgRsp,omitempty"`
}

func (x *D388RspBody) Reset() {
	*x = D388RspBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *D388RspBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D388RspBody) ProtoMessage() {}

func (x *D388RspBody) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D388RspBody.ProtoReflect.Descriptor instead.
func (*D388RspBody) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{14}
}

func (x *D388RspBody) GetClientIp() uint32 {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return 0
}

func (x *D388RspBody) GetSubcmd() uint32 {
	if x != nil && x.Subcmd != nil {
		return *x.Subcmd
	}
	return 0
}

func (x *D388RspBody) GetTryupImgRsp() []*D388TryUpImgRsp {
	if x != nil {
		return x.TryupImgRsp
	}
	return nil
}

func (x *D388RspBody) GetGetimgUrlRsp() []*GetImgUrlRsp {
	if x != nil {
		return x.GetimgUrlRsp
	}
	return nil
}

func (x *D388RspBody) GetTryupPttRsp() []*TryUpPttRsp {
	if x != nil {
		return x.TryupPttRsp
	}
	return nil
}

func (x *D388RspBody) GetGetpttUrlRsp() []*GetPttUrlRsp {
	if x != nil {
		return x.GetpttUrlRsp
	}
	return nil
}

func (x *D388RspBody) GetDelImgRsp() []*DelImgRsp {
	if x != nil {
		return x.DelImgRsp
	}
	return nil
}

type TryUpImgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode       *uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode,omitempty"`
	SrcUin          *uint64 `protobuf:"varint,2,opt,name=srcUin" json:"srcUin,omitempty"`
	FileId          *uint64 `protobuf:"varint,3,opt,name=fileId" json:"fileId,omitempty"`
	FileMd5         []byte  `protobuf:"bytes,4,opt,name=fileMd5" json:"fileMd5,omitempty"`
	FileSize        *uint64 `protobuf:"varint,5,opt,name=fileSize" json:"fileSize,omitempty"`
	FileName        []byte  `protobuf:"bytes,6,opt,name=fileName" json:"fileName,omitempty"`
	SrcTerm         *uint32 `protobuf:"varint,7,opt,name=srcTerm" json:"srcTerm,omitempty"`
	PlatformType    *uint32 `protobuf:"varint,8,opt,name=platformType" json:"platformType,omitempty"`
	BuType          *uint32 `protobuf:"varint,9,opt,name=buType" json:"buType,omitempty"`
	PicWidth        *uint32 `protobuf:"varint,10,opt,name=picWidth" json:"picWidth,omitempty"`
	PicHeight       *uint32 `protobuf:"varint,11,opt,name=picHeight" json:"picHeight,omitempty"`
	PicType         *uint32 `protobuf:"varint,12,opt,name=picType" json:"picType,omitempty"`
	BuildVer        []byte  `protobuf:"bytes,13,opt,name=buildVer" json:"buildVer,omitempty"`
	InnerIp         *uint32 `protobuf:"varint,14,opt,name=innerIp" json:"innerIp,omitempty"`
	AppPicType      *uint32 `protobuf:"varint,15,opt,name=appPicType" json:"appPicType,omitempty"`
	OriginalPic     *uint32 `protobuf:"varint,16,opt,name=originalPic" json:"originalPic,omitempty"`
	FileIndex       []byte  `protobuf:"bytes,17,opt,name=fileIndex" json:"fileIndex,omitempty"`
	DstUin          *uint64 `protobuf:"varint,18,opt,name=dstUin" json:"dstUin,omitempty"`
	SrvUpload       *uint32 `protobuf:"varint,19,opt,name=srvUpload" json:"srvUpload,omitempty"`
	TransferUrl     []byte  `protobuf:"bytes,20,opt,name=transferUrl" json:"transferUrl,omitempty"`
	QqmeetGuildId   *uint64 `protobuf:"varint,21,opt,name=qqmeetGuildId" json:"qqmeetGuildId,omitempty"`
	QqmeetChannelId *uint64 `protobuf:"varint,22,opt,name=qqmeetChannelId" json:"qqmeetChannelId,omitempty"`
}

func (x *TryUpImgReq) Reset() {
	*x = TryUpImgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryUpImgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryUpImgReq) ProtoMessage() {}

func (x *TryUpImgReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryUpImgReq.ProtoReflect.Descriptor instead.
func (*TryUpImgReq) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{15}
}

func (x *TryUpImgReq) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *TryUpImgReq) GetSrcUin() uint64 {
	if x != nil && x.SrcUin != nil {
		return *x.SrcUin
	}
	return 0
}

func (x *TryUpImgReq) GetFileId() uint64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *TryUpImgReq) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *TryUpImgReq) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *TryUpImgReq) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *TryUpImgReq) GetSrcTerm() uint32 {
	if x != nil && x.SrcTerm != nil {
		return *x.SrcTerm
	}
	return 0
}

func (x *TryUpImgReq) GetPlatformType() uint32 {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return 0
}

func (x *TryUpImgReq) GetBuType() uint32 {
	if x != nil && x.BuType != nil {
		return *x.BuType
	}
	return 0
}

func (x *TryUpImgReq) GetPicWidth() uint32 {
	if x != nil && x.PicWidth != nil {
		return *x.PicWidth
	}
	return 0
}

func (x *TryUpImgReq) GetPicHeight() uint32 {
	if x != nil && x.PicHeight != nil {
		return *x.PicHeight
	}
	return 0
}

func (x *TryUpImgReq) GetPicType() uint32 {
	if x != nil && x.PicType != nil {
		return *x.PicType
	}
	return 0
}

func (x *TryUpImgReq) GetBuildVer() []byte {
	if x != nil {
		return x.BuildVer
	}
	return nil
}

func (x *TryUpImgReq) GetInnerIp() uint32 {
	if x != nil && x.InnerIp != nil {
		return *x.InnerIp
	}
	return 0
}

func (x *TryUpImgReq) GetAppPicType() uint32 {
	if x != nil && x.AppPicType != nil {
		return *x.AppPicType
	}
	return 0
}

func (x *TryUpImgReq) GetOriginalPic() uint32 {
	if x != nil && x.OriginalPic != nil {
		return *x.OriginalPic
	}
	return 0
}

func (x *TryUpImgReq) GetFileIndex() []byte {
	if x != nil {
		return x.FileIndex
	}
	return nil
}

func (x *TryUpImgReq) GetDstUin() uint64 {
	if x != nil && x.DstUin != nil {
		return *x.DstUin
	}
	return 0
}

func (x *TryUpImgReq) GetSrvUpload() uint32 {
	if x != nil && x.SrvUpload != nil {
		return *x.SrvUpload
	}
	return 0
}

func (x *TryUpImgReq) GetTransferUrl() []byte {
	if x != nil {
		return x.TransferUrl
	}
	return nil
}

func (x *TryUpImgReq) GetQqmeetGuildId() uint64 {
	if x != nil && x.QqmeetGuildId != nil {
		return *x.QqmeetGuildId
	}
	return 0
}

func (x *TryUpImgReq) GetQqmeetChannelId() uint64 {
	if x != nil && x.QqmeetChannelId != nil {
		return *x.QqmeetChannelId
	}
	return 0
}

type D388TryUpImgRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId        *uint64         `protobuf:"varint,1,opt,name=fileId" json:"fileId,omitempty"`
	Result        *uint32         `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	FailMsg       []byte          `protobuf:"bytes,3,opt,name=failMsg" json:"failMsg,omitempty"`
	FileExit      *bool           `protobuf:"varint,4,opt,name=fileExit" json:"fileExit,omitempty"`
	ImgInfo       *ImgInfo        `protobuf:"bytes,5,opt,name=imgInfo" json:"imgInfo,omitempty"`
	UpIp          []uint32        `protobuf:"varint,6,rep,name=upIp" json:"upIp,omitempty"`
	UpPort        []uint32        `protobuf:"varint,7,rep,name=upPort" json:"upPort,omitempty"`
	UpUkey        []byte          `protobuf:"bytes,8,opt,name=upUkey" json:"upUkey,omitempty"`
	Fileid        *uint64         `protobuf:"varint,9,opt,name=fileid" json:"fileid,omitempty"`
	UpOffset      *uint64         `protobuf:"varint,10,opt,name=upOffset" json:"upOffset,omitempty"`
	BlockSize     *uint64         `protobuf:"varint,11,opt,name=blockSize" json:"blockSize,omitempty"`
	NewBigChan    *bool           `protobuf:"varint,12,opt,name=newBigChan" json:"newBigChan,omitempty"`
	UpIp6         []*IPv6Info     `protobuf:"bytes,26,rep,name=upIp6" json:"upIp6,omitempty"`
	ClientIp6     []byte          `protobuf:"bytes,27,opt,name=clientIp6" json:"clientIp6,omitempty"`
	DownloadIndex []byte          `protobuf:"bytes,28,opt,name=downloadIndex" json:"downloadIndex,omitempty"`
	Info4Busi     *TryUpInfo4Busi `protobuf:"bytes,1001,opt,name=info4Busi" json:"info4Busi,omitempty"`
}

func (x *D388TryUpImgRsp) Reset() {
	*x = D388TryUpImgRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *D388TryUpImgRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*D388TryUpImgRsp) ProtoMessage() {}

func (x *D388TryUpImgRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use D388TryUpImgRsp.ProtoReflect.Descriptor instead.
func (*D388TryUpImgRsp) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{16}
}

func (x *D388TryUpImgRsp) GetFileId() uint64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *D388TryUpImgRsp) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *D388TryUpImgRsp) GetFailMsg() []byte {
	if x != nil {
		return x.FailMsg
	}
	return nil
}

func (x *D388TryUpImgRsp) GetFileExit() bool {
	if x != nil && x.FileExit != nil {
		return *x.FileExit
	}
	return false
}

func (x *D388TryUpImgRsp) GetImgInfo() *ImgInfo {
	if x != nil {
		return x.ImgInfo
	}
	return nil
}

func (x *D388TryUpImgRsp) GetUpIp() []uint32 {
	if x != nil {
		return x.UpIp
	}
	return nil
}

func (x *D388TryUpImgRsp) GetUpPort() []uint32 {
	if x != nil {
		return x.UpPort
	}
	return nil
}

func (x *D388TryUpImgRsp) GetUpUkey() []byte {
	if x != nil {
		return x.UpUkey
	}
	return nil
}

func (x *D388TryUpImgRsp) GetFileid() uint64 {
	if x != nil && x.Fileid != nil {
		return *x.Fileid
	}
	return 0
}

func (x *D388TryUpImgRsp) GetUpOffset() uint64 {
	if x != nil && x.UpOffset != nil {
		return *x.UpOffset
	}
	return 0
}

func (x *D388TryUpImgRsp) GetBlockSize() uint64 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *D388TryUpImgRsp) GetNewBigChan() bool {
	if x != nil && x.NewBigChan != nil {
		return *x.NewBigChan
	}
	return false
}

func (x *D388TryUpImgRsp) GetUpIp6() []*IPv6Info {
	if x != nil {
		return x.UpIp6
	}
	return nil
}

func (x *D388TryUpImgRsp) GetClientIp6() []byte {
	if x != nil {
		return x.ClientIp6
	}
	return nil
}

func (x *D388TryUpImgRsp) GetDownloadIndex() []byte {
	if x != nil {
		return x.DownloadIndex
	}
	return nil
}

func (x *D388TryUpImgRsp) GetInfo4Busi() *TryUpInfo4Busi {
	if x != nil {
		return x.Info4Busi
	}
	return nil
}

type TryUpInfo4Busi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownDomain      []byte `protobuf:"bytes,1,opt,name=downDomain" json:"downDomain,omitempty"`
	ThumbDownUrl    []byte `protobuf:"bytes,2,opt,name=thumbDownUrl" json:"thumbDownUrl,omitempty"`
	OriginalDownUrl []byte `protobuf:"bytes,3,opt,name=originalDownUrl" json:"originalDownUrl,omitempty"`
	BigDownUrl      []byte `protobuf:"bytes,4,opt,name=bigDownUrl" json:"bigDownUrl,omitempty"`
	FileResid       []byte `protobuf:"bytes,5,opt,name=fileResid" json:"fileResid,omitempty"`
}

func (x *TryUpInfo4Busi) Reset() {
	*x = TryUpInfo4Busi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryUpInfo4Busi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryUpInfo4Busi) ProtoMessage() {}

func (x *TryUpInfo4Busi) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryUpInfo4Busi.ProtoReflect.Descriptor instead.
func (*TryUpInfo4Busi) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{17}
}

func (x *TryUpInfo4Busi) GetDownDomain() []byte {
	if x != nil {
		return x.DownDomain
	}
	return nil
}

func (x *TryUpInfo4Busi) GetThumbDownUrl() []byte {
	if x != nil {
		return x.ThumbDownUrl
	}
	return nil
}

func (x *TryUpInfo4Busi) GetOriginalDownUrl() []byte {
	if x != nil {
		return x.OriginalDownUrl
	}
	return nil
}

func (x *TryUpInfo4Busi) GetBigDownUrl() []byte {
	if x != nil {
		return x.BigDownUrl
	}
	return nil
}

func (x *TryUpInfo4Busi) GetFileResid() []byte {
	if x != nil {
		return x.FileResid
	}
	return nil
}

type TryUpPttReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupCode    *uint64 `protobuf:"varint,1,opt,name=groupCode" json:"groupCode,omitempty"`
	SrcUin       *uint64 `protobuf:"varint,2,opt,name=srcUin" json:"srcUin,omitempty"`
	FileId       *uint64 `protobuf:"varint,3,opt,name=fileId" json:"fileId,omitempty"`
	FileMd5      []byte  `protobuf:"bytes,4,opt,name=fileMd5" json:"fileMd5,omitempty"`
	FileSize     *uint64 `protobuf:"varint,5,opt,name=fileSize" json:"fileSize,omitempty"`
	FileName     []byte  `protobuf:"bytes,6,opt,name=fileName" json:"fileName,omitempty"`
	SrcTerm      *uint32 `protobuf:"varint,7,opt,name=srcTerm" json:"srcTerm,omitempty"`
	PlatformType *uint32 `protobuf:"varint,8,opt,name=platformType" json:"platformType,omitempty"`
	BuType       *uint32 `protobuf:"varint,9,opt,name=buType" json:"buType,omitempty"`
	BuildVer     []byte  `protobuf:"bytes,10,opt,name=buildVer" json:"buildVer,omitempty"`
	InnerIp      *uint32 `protobuf:"varint,11,opt,name=innerIp" json:"innerIp,omitempty"`
	VoiceLength  *uint32 `protobuf:"varint,12,opt,name=voiceLength" json:"voiceLength,omitempty"`
	NewUpChan    *bool   `protobuf:"varint,13,opt,name=newUpChan" json:"newUpChan,omitempty"`
	Codec        *uint32 `protobuf:"varint,14,opt,name=codec" json:"codec,omitempty"`
	VoiceType    *uint32 `protobuf:"varint,15,opt,name=voiceType" json:"voiceType,omitempty"`
	BuId         *uint32 `protobuf:"varint,16,opt,name=buId" json:"buId,omitempty"`
}

func (x *TryUpPttReq) Reset() {
	*x = TryUpPttReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryUpPttReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryUpPttReq) ProtoMessage() {}

func (x *TryUpPttReq) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryUpPttReq.ProtoReflect.Descriptor instead.
func (*TryUpPttReq) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{18}
}

func (x *TryUpPttReq) GetGroupCode() uint64 {
	if x != nil && x.GroupCode != nil {
		return *x.GroupCode
	}
	return 0
}

func (x *TryUpPttReq) GetSrcUin() uint64 {
	if x != nil && x.SrcUin != nil {
		return *x.SrcUin
	}
	return 0
}

func (x *TryUpPttReq) GetFileId() uint64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *TryUpPttReq) GetFileMd5() []byte {
	if x != nil {
		return x.FileMd5
	}
	return nil
}

func (x *TryUpPttReq) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *TryUpPttReq) GetFileName() []byte {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *TryUpPttReq) GetSrcTerm() uint32 {
	if x != nil && x.SrcTerm != nil {
		return *x.SrcTerm
	}
	return 0
}

func (x *TryUpPttReq) GetPlatformType() uint32 {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return 0
}

func (x *TryUpPttReq) GetBuType() uint32 {
	if x != nil && x.BuType != nil {
		return *x.BuType
	}
	return 0
}

func (x *TryUpPttReq) GetBuildVer() []byte {
	if x != nil {
		return x.BuildVer
	}
	return nil
}

func (x *TryUpPttReq) GetInnerIp() uint32 {
	if x != nil && x.InnerIp != nil {
		return *x.InnerIp
	}
	return 0
}

func (x *TryUpPttReq) GetVoiceLength() uint32 {
	if x != nil && x.VoiceLength != nil {
		return *x.VoiceLength
	}
	return 0
}

func (x *TryUpPttReq) GetNewUpChan() bool {
	if x != nil && x.NewUpChan != nil {
		return *x.NewUpChan
	}
	return false
}

func (x *TryUpPttReq) GetCodec() uint32 {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return 0
}

func (x *TryUpPttReq) GetVoiceType() uint32 {
	if x != nil && x.VoiceType != nil {
		return *x.VoiceType
	}
	return 0
}

func (x *TryUpPttReq) GetBuId() uint32 {
	if x != nil && x.BuId != nil {
		return *x.BuId
	}
	return 0
}

type TryUpPttRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId      *uint64     `protobuf:"varint,1,opt,name=fileId" json:"fileId,omitempty"`
	Result      *uint32     `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	FailMsg     []byte      `protobuf:"bytes,3,opt,name=failMsg" json:"failMsg,omitempty"`
	FileExit    *bool       `protobuf:"varint,4,opt,name=fileExit" json:"fileExit,omitempty"`
	UpIp        []uint32    `protobuf:"varint,5,rep,name=upIp" json:"upIp,omitempty"`
	UpPort      []uint32    `protobuf:"varint,6,rep,name=upPort" json:"upPort,omitempty"`
	UpUkey      []byte      `protobuf:"bytes,7,opt,name=upUkey" json:"upUkey,omitempty"`
	Fileid      *uint64     `protobuf:"varint,8,opt,name=fileid" json:"fileid,omitempty"`
	UpOffset    *uint64     `protobuf:"varint,9,opt,name=upOffset" json:"upOffset,omitempty"`
	BlockSize   *uint64     `protobuf:"varint,10,opt,name=blockSize" json:"blockSize,omitempty"`
	FileKey     []byte      `protobuf:"bytes,11,opt,name=fileKey" json:"fileKey,omitempty"`
	ChannelType *uint32     `protobuf:"varint,12,opt,name=channelType" json:"channelType,omitempty"`
	UpIp6       []*IPv6Info `protobuf:"bytes,26,rep,name=upIp6" json:"upIp6,omitempty"`
	ClientIp6   []byte      `protobuf:"bytes,27,opt,name=clientIp6" json:"clientIp6,omitempty"`
}

func (x *TryUpPttRsp) Reset() {
	*x = TryUpPttRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cmd0x388_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryUpPttRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryUpPttRsp) ProtoMessage() {}

func (x *TryUpPttRsp) ProtoReflect() protoreflect.Message {
	mi := &file_cmd0x388_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryUpPttRsp.ProtoReflect.Descriptor instead.
func (*TryUpPttRsp) Descriptor() ([]byte, []int) {
	return file_cmd0x388_proto_rawDescGZIP(), []int{19}
}

func (x *TryUpPttRsp) GetFileId() uint64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

func (x *TryUpPttRsp) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *TryUpPttRsp) GetFailMsg() []byte {
	if x != nil {
		return x.FailMsg
	}
	return nil
}

func (x *TryUpPttRsp) GetFileExit() bool {
	if x != nil && x.FileExit != nil {
		return *x.FileExit
	}
	return false
}

func (x *TryUpPttRsp) GetUpIp() []uint32 {
	if x != nil {
		return x.UpIp
	}
	return nil
}

func (x *TryUpPttRsp) GetUpPort() []uint32 {
	if x != nil {
		return x.UpPort
	}
	return nil
}

func (x *TryUpPttRsp) GetUpUkey() []byte {
	if x != nil {
		return x.UpUkey
	}
	return nil
}

func (x *TryUpPttRsp) GetFileid() uint64 {
	if x != nil && x.Fileid != nil {
		return *x.Fileid
	}
	return 0
}

func (x *TryUpPttRsp) GetUpOffset() uint64 {
	if x != nil && x.UpOffset != nil {
		return *x.UpOffset
	}
	return 0
}

func (x *TryUpPttRsp) GetBlockSize() uint64 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *TryUpPttRsp) GetFileKey() []byte {
	if x != nil {
		return x.FileKey
	}
	return nil
}

func (x *TryUpPttRsp) GetChannelType() uint32 {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return 0
}

func (x *TryUpPttRsp) GetUpIp6() []*IPv6Info {
	if x != nil {
		return x.UpIp6
	}
	return nil
}

func (x *TryUpPttRsp) GetClientIp6() []byte {
	if x != nil {
		return x.ClientIp6
	}
	return nil
}

var File_cmd0x388_proto protoreflect.FileDescriptor

var file_cmd0x388_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x30, 0x78, 0x33, 0x38, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8b, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x72, 0x63, 0x55, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x72, 0x63, 0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x56, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5b,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x11, 0x45,
	0x78, 0x70, 0x52, 0x6f, 0x61, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x72, 0x65, 0x73, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x52, 0x6f, 0x61,
	0x6d, 0x50, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6b, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6b, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69,
	0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x22, 0x31, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x50, 0x69, 0x63, 0x54, 0x72, 0x79, 0x55, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x78, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x52, 0x6f, 0x61, 0x6d, 0x54, 0x72, 0x79, 0x55, 0x70, 0x12, 0x37, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x72, 0x6f, 0x61, 0x6d, 0x50, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x78, 0x70, 0x52, 0x6f, 0x61, 0x6d, 0x50, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x6f, 0x61, 0x6d, 0x50, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xce, 0x05, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x72, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x75, 0x72, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x56, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x56, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x69, 0x63, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x69, 0x63, 0x55, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x71, 0x71, 0x6d, 0x65, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x71, 0x71, 0x6d, 0x65, 0x65, 0x74, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x71, 0x6d, 0x65, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x71, 0x71, 0x6d, 0x65, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc1, 0x05, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x07, 0x69,
	0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49,
	0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x69, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x6f, 0x77, 0x6e, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x44,
	0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x69, 0x67, 0x44, 0x6f, 0x77,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x69, 0x67, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x62, 0x69, 0x67, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x55, 0x72, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x55, 0x72, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x07, 0x64, 0x6f, 0x77, 0x6e, 0x49,
	0x70, 0x36, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x36, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36, 0x22, 0xa6, 0x03, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x74,
	0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x64, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x75, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x75, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x73, 0x41,
	0x75, 0x74, 0x6f, 0x22, 0xb3, 0x03, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x74, 0x74, 0x55, 0x72,
	0x6c, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x77, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x6f, 0x77, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f,
	0x77, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x6f,
	0x77, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x07, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x36, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x77, 0x6e,
	0x49, 0x70, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70,
	0x36, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x30, 0x0a, 0x08, 0x49, 0x50, 0x76,
	0x36, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x36, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x69, 0x70, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x07,
	0x49, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64,
	0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4f, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x22, 0xec, 0x02, 0x0a, 0x0b, 0x44, 0x33, 0x38,
	0x38, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x72,
	0x79, 0x75, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x54, 0x72, 0x79, 0x55, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x52, 0x0b, 0x74,
	0x72, 0x79, 0x75, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x0c, 0x67, 0x65,
	0x74, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x52,
	0x0c, 0x67, 0x65, 0x74, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a,
	0x0b, 0x74, 0x72, 0x79, 0x75, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71,
	0x52, 0x0b, 0x74, 0x72, 0x79, 0x75, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a,
	0x0c, 0x67, 0x65, 0x74, 0x70, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x70, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x44, 0x33, 0x38, 0x38,
	0x52, 0x73, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x75, 0x62, 0x63, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x74,
	0x72, 0x79, 0x75, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x44, 0x33, 0x38, 0x38, 0x54, 0x72, 0x79, 0x55, 0x70, 0x49, 0x6d, 0x67, 0x52,
	0x73, 0x70, 0x52, 0x0b, 0x74, 0x72, 0x79, 0x75, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x31, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x52, 0x73, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x52, 0x73, 0x70, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x69, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x52,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x72, 0x79, 0x75, 0x70, 0x50, 0x74, 0x74, 0x52, 0x73,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50,
	0x74, 0x74, 0x52, 0x73, 0x70, 0x52, 0x0b, 0x74, 0x72, 0x79, 0x75, 0x70, 0x50, 0x74, 0x74, 0x52,
	0x73, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x70, 0x74, 0x74, 0x55, 0x72, 0x6c, 0x52,
	0x73, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x74,
	0x74, 0x55, 0x72, 0x6c, 0x52, 0x73, 0x70, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x70, 0x74, 0x74, 0x55,
	0x72, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x49, 0x6d, 0x67, 0x52,
	0x73, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x49, 0x6d,
	0x67, 0x52, 0x73, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x22,
	0x95, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x79, 0x55, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x72, 0x63, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x72, 0x63, 0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x69, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x50, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x69,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x64, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x76, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x72, 0x76, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x71, 0x6d, 0x65, 0x65,
	0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x71, 0x71, 0x6d, 0x65, 0x65, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x71, 0x71, 0x6d, 0x65, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x71, 0x6d, 0x65, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xe6, 0x03, 0x0a, 0x0f, 0x44, 0x33, 0x38, 0x38,
	0x54, 0x72, 0x79, 0x55, 0x70, 0x49, 0x6d, 0x67, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x49, 0x6d, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x69, 0x6d,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x70, 0x49, 0x70, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x70, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x55, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x75, 0x70, 0x55, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x77, 0x42, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6e, 0x65, 0x77, 0x42, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x05, 0x75,
	0x70, 0x49, 0x70, 0x36, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x50, 0x76,
	0x36, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x70, 0x49, 0x70, 0x36, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2e, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x34, 0x42, 0x75, 0x73, 0x69, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x72, 0x79, 0x55, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x34, 0x42, 0x75, 0x73, 0x69, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x34, 0x42, 0x75, 0x73, 0x69,
	0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x79, 0x55, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x34, 0x42,
	0x75, 0x73, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x44, 0x6f, 0x77, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x69, 0x64, 0x22,
	0xc1, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x72, 0x63, 0x55, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x72, 0x63, 0x55, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x72, 0x63, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62,
	0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x56, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x55, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6e, 0x65, 0x77, 0x55, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x75, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62,
	0x75, 0x49, 0x64, 0x22, 0x84, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x79, 0x55, 0x70, 0x50, 0x74, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x70, 0x49,
	0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x70, 0x49, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x55, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x70, 0x55, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x75,
	0x70, 0x49, 0x70, 0x36, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x50, 0x76,
	0x36, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x70, 0x49, 0x70, 0x36, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x36, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f,
	0x3b, 0x63, 0x6d, 0x64, 0x30, 0x78, 0x33, 0x38, 0x38,
}

var (
	file_cmd0x388_proto_rawDescOnce sync.Once
	file_cmd0x388_proto_rawDescData = file_cmd0x388_proto_rawDesc
)

func file_cmd0x388_proto_rawDescGZIP() []byte {
	file_cmd0x388_proto_rawDescOnce.Do(func() {
		file_cmd0x388_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd0x388_proto_rawDescData)
	})
	return file_cmd0x388_proto_rawDescData
}

var file_cmd0x388_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_cmd0x388_proto_goTypes = []interface{}{
	(*DelImgReq)(nil),             // 0: DelImgReq
	(*DelImgRsp)(nil),             // 1: DelImgRsp
	(*ExpRoamExtendInfo)(nil),     // 2: ExpRoamExtendInfo
	(*ExpRoamPicInfo)(nil),        // 3: ExpRoamPicInfo
	(*ExtensionCommPicTryUp)(nil), // 4: ExtensionCommPicTryUp
	(*ExtensionExpRoamTryUp)(nil), // 5: ExtensionExpRoamTryUp
	(*GetImgUrlReq)(nil),          // 6: GetImgUrlReq
	(*GetImgUrlRsp)(nil),          // 7: GetImgUrlRsp
	(*GetPttUrlReq)(nil),          // 8: GetPttUrlReq
	(*GetPttUrlRsp)(nil),          // 9: GetPttUrlRsp
	(*IPv6Info)(nil),              // 10: IPv6Info
	(*ImgInfo)(nil),               // 11: ImgInfo
	(*PicSize)(nil),               // 12: PicSize
	(*D388ReqBody)(nil),           // 13: D388ReqBody
	(*D388RspBody)(nil),           // 14: D388RspBody
	(*TryUpImgReq)(nil),           // 15: TryUpImgReq
	(*D388TryUpImgRsp)(nil),       // 16: D388TryUpImgRsp
	(*TryUpInfo4Busi)(nil),        // 17: TryUpInfo4Busi
	(*TryUpPttReq)(nil),           // 18: TryUpPttReq
	(*TryUpPttRsp)(nil),           // 19: TryUpPttRsp
}
var file_cmd0x388_proto_depIdxs = []int32{
	3,  // 0: ExtensionExpRoamTryUp.exproamPicInfo:type_name -> ExpRoamPicInfo
	11, // 1: GetImgUrlRsp.imgInfo:type_name -> ImgInfo
	10, // 2: GetImgUrlRsp.downIp6:type_name -> IPv6Info
	10, // 3: GetPttUrlRsp.downIp6:type_name -> IPv6Info
	15, // 4: D388ReqBody.tryupImgReq:type_name -> TryUpImgReq
	6,  // 5: D388ReqBody.getimgUrlReq:type_name -> GetImgUrlReq
	18, // 6: D388ReqBody.tryupPttReq:type_name -> TryUpPttReq
	8,  // 7: D388ReqBody.getpttUrlReq:type_name -> GetPttUrlReq
	0,  // 8: D388ReqBody.delImgReq:type_name -> DelImgReq
	16, // 9: D388RspBody.tryupImgRsp:type_name -> D388TryUpImgRsp
	7,  // 10: D388RspBody.getimgUrlRsp:type_name -> GetImgUrlRsp
	19, // 11: D388RspBody.tryupPttRsp:type_name -> TryUpPttRsp
	9,  // 12: D388RspBody.getpttUrlRsp:type_name -> GetPttUrlRsp
	1,  // 13: D388RspBody.delImgRsp:type_name -> DelImgRsp
	11, // 14: D388TryUpImgRsp.imgInfo:type_name -> ImgInfo
	10, // 15: D388TryUpImgRsp.upIp6:type_name -> IPv6Info
	17, // 16: D388TryUpImgRsp.info4Busi:type_name -> TryUpInfo4Busi
	10, // 17: TryUpPttRsp.upIp6:type_name -> IPv6Info
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_cmd0x388_proto_init() }
func file_cmd0x388_proto_init() {
	if File_cmd0x388_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cmd0x388_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelImgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelImgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpRoamExtendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpRoamPicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionCommPicTryUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionExpRoamTryUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImgUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImgUrlRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPttUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPttUrlRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv6Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PicSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*D388ReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*D388RspBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryUpImgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*D388TryUpImgRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryUpInfo4Busi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryUpPttReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cmd0x388_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryUpPttRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd0x388_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cmd0x388_proto_goTypes,
		DependencyIndexes: file_cmd0x388_proto_depIdxs,
		MessageInfos:      file_cmd0x388_proto_msgTypes,
	}.Build()
	File_cmd0x388_proto = out.File
	file_cmd0x388_proto_rawDesc = nil
	file_cmd0x388_proto_goTypes = nil
	file_cmd0x388_proto_depIdxs = nil
}
